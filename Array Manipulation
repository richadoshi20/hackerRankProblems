/*
Starting with a 1-indexed array of zeros and a list of operations, for each operation add a value to each of the array element between two given indices, inclusive. Once all operations have been performed, return the maximum value in the array.
*/

import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the arrayManipulation function below.
    static long arrayManipulation(int n, int[][] queries) {
        // for(int[] query: queries)
        // System.out.println(Arrays.toString(query));
        List<Long> output = new ArrayList<>();
        for(int i = 0; i <= n; i++) 
            {
                output.add(0L);
            }
        // long[] output = new long[n+1];
        for(int[] query: queries) {
            int start = query[0];
            int end = query[1];
            int value = query[2];
            output.set(start,output.get(start)+value);
            // output.[start] += value;
            if(end+1 <= n)
                output.set(end+1,output.get(end+1)-value);
            
                // output[end+1] -= value;            
        }
        long max = output.get(1);
        for(int i=2; i<=n;i++)   {
                output.set(i,output.get(i)+output.get(i-1));
            
            // output[i] += output[i-1];
            max = Math.max(max,output.get(i));
        }
        // System.out.println(Arrays.toString(output));
        return max;
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] nm = scanner.nextLine().split(" ");

        int n = Integer.parseInt(nm[0]);

        int m = Integer.parseInt(nm[1]);

        int[][] queries = new int[m][3];

        for (int i = 0; i < m; i++) {
            String[] queriesRowItems = scanner.nextLine().split(" ");
            scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

            for (int j = 0; j < 3; j++) {
                int queriesItem = Integer.parseInt(queriesRowItems[j]);
                queries[i][j] = queriesItem;
            }
        }

        long result = arrayManipulation(n, queries);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}
